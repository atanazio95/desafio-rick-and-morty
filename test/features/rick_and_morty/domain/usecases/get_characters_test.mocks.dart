// Mocks generated by Mockito 5.4.6 from annotations
// in desafio_rick_and_morty_way_data/test/features/rick_and_morty/domain/usecases/get_characters_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:connectivity_plus/connectivity_plus.dart' as _i8;
import 'package:connectivity_plus_platform_interface/connectivity_plus_platform_interface.dart'
    as _i9;
import 'package:dartz/dartz.dart' as _i3;
import 'package:desafio_rick_and_morty_way_data/core/error/failures.dart'
    as _i6;
import 'package:desafio_rick_and_morty_way_data/features/rick_and_morty/domain/entities/character.dart'
    as _i7;
import 'package:desafio_rick_and_morty_way_data/features/rick_and_morty/domain/repositories/character_repository.dart'
    as _i2;
import 'package:desafio_rick_and_morty_way_data/features/rick_and_morty/domain/usecases/get_characters.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCharacterRepository_0 extends _i1.SmartFake
    implements _i2.CharacterRepository {
  _FakeCharacterRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetCharacters].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCharacters extends _i1.Mock implements _i4.GetCharacters {
  MockGetCharacters() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CharacterRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCharacterRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CharacterRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Character>>> call(int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [page],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.Character>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.Character>>(
          this,
          Invocation.method(
            #call,
            [page],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Character>>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Character>>> searchCharacters(
          String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchCharacters,
          [name],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.Character>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.Character>>(
          this,
          Invocation.method(
            #searchCharacters,
            [name],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Character>>>);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i8.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<List<_i9.ConnectivityResult>> get onConnectivityChanged =>
      (super.noSuchMethod(
        Invocation.getter(#onConnectivityChanged),
        returnValue: _i5.Stream<List<_i9.ConnectivityResult>>.empty(),
      ) as _i5.Stream<List<_i9.ConnectivityResult>>);

  @override
  _i5.Future<List<_i9.ConnectivityResult>> checkConnectivity() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i5.Future<List<_i9.ConnectivityResult>>.value(
            <_i9.ConnectivityResult>[]),
      ) as _i5.Future<List<_i9.ConnectivityResult>>);
}
